services:

  app:
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - backup:/backup
      - logs:/logs
    networks:
      - network_shared
    entrypoint: [ "/bin/sh", "-c", "scripts/entrypoint.sh" ]
    depends_on:
      mysql:
        condition: service_healthy

  # Message Brokers
  kafka:
    image: apache/kafka-native:latest
    container_name: kafka
    networks:
      - network_shared
    ports:
      - '9092:9092'
      - '9093:9093'
    env_file: .env
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z localhost 9092" ]
      interval: 1s # It may take some time for the group coordinator to become fully accessible.
      retries: 5
      timeout: 5s

  # rabbitmq:
  #   image: rabbitmq:management
  #   env_file: .env
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   networks:
  #     - network_shared

  # Message Brokers Management Tools
  # kafdrop:
  #   env_file: .env
  #   image: obsidiandynamics/kafdrop
  #   ports:
  #     - "9000:9000"
  #   networks:
  #     - network_shared
  #   depends_on:
  #     - kafka

  mysql:
    image: mysql:9.0
    env_file: .env
    ports:
      - "3306:3306"
    volumes:
      - /var/run/mysqld:/var/run/mysqld
      - data_mysql:/var/lib/mysql
    networks:
      - network_shared
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  mongo:
    image: mongo
    env_file: .env
    ports:
      - "27017:27017"
    volumes:
      - data_mongodb:/data/db
    networks:
      - network_shared
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgresql:
    image: postgres
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - data_postgresql:/var/lib/postgresql/data
    networks:
      - network_shared
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # cassandra:
  #   image: cassandra:latest
  #   env_file: .env
  #   ports:
  #     - "9042:9042"
  #   networks:
  #     - network_shared

  clickhouse:
    image: clickhouse/clickhouse-server
    env_file: .env
    ports:
      - "9000:9000"
      - "8123:8123"
    volumes:
      - data_clickhouse:/var/lib/clickhouse
    networks:
      - network_shared

  redis:
    image: redis:latest
    env_file: .env
    ports:
      - "6379:6379"
    volumes:
      - data_redis:/data
    networks:
      - network_shared

  # influxdb:
  #   image: influxdb
  #   env_file: .env
  #   ports:
  #     - "8086:8086"
  #   volumes:
  #     - data_influxdb:/var/lib/influxdb
  #   networks:
  #     - network_shared

  # neo4j:
  #   image: neo4j:4.4
  #   env_file: .env
  #   ports:
  #     - "7474:7474"
  #     - "7687:7687"
  #   volumes:
  #     - data_neo4j:/data
  #   networks:
  #     - network_shared

  # couchdb:
  #   image: couchdb:latest
  #   env_file: .env
  #   ports:
  #     - "5984:5984"
  #   volumes:
  #     - data_couchdb:/opt/couchdb/data
  #   networks:
  #     - network_shared

  # Database Management Tools
  # mysql_ui:
  #   env_file: .env
  #   image: phpmyadmin/phpmyadmin
  #   ports:
  #     - "8081:80"
  #   networks:
  #     - network_shared
  #   depends_on:
  #     - mysql

  # mongo_ui:
  #   image: mongo-express
  #   env_file: .env
  #   ports:
  #     - "8082:8081"
  #   networks:
  #     - network_shared
  #   depends_on:
  #     - mongo

  # postgresql_ui:
  #   image: dpage/pgadmin4
  #   env_file: .env
  #   ports:
  #     - "8083:80"
  #   volumes:
  #     - ./db/postgresql/service-ui/servers.json:/pgadmin4/servers.json
  #   networks:
  #     - network_shared
  #   depends_on:
  #     - postgresql

  # dbeaver:
  #   image: dbeaver/cloudbeaver
  #   env_file: .env
  #   ports:
  #     - "8084:8080" # DBeaver web interface
  #   networks:
  #     - network_shared
  #   depends_on:
  #     - mysql
  #     - mongo
  #     - postgresql
  #     - cassandra
  #     - redis
  #     - influxdb
  #     - elasticsearch
  #   command: >
  #     sh -c "while true; do sleep 30; done"

  # Elasticsearch Services
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    env_file: .env
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - network_shared
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.10.1
  #   env_file: .env
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - network_shared

  # Monitoring Services
  # prometheus:
  #   image: prom/prometheus
  #   env_file: .env
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - network_shared

  # grafana:
  #   image: grafana/grafana
  #   env_file: .env
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - network_shared

  # Web Services
  # web:
  #   image: nginx:latest
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #   networks:
  #     - network_shared

volumes:
  backup:
  logs:
  data_kafka:
  data_mysql:
  data_mongodb:
  data_postgresql:
  data_clickhouse:
  data_redis:
  data_influxdb:
  data_neo4j:
  data_couchdb:


networks:
  network_shared:
    # docker network create network_shared
    external: true # Ensure this network exists or create it manually
